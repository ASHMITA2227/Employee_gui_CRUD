import sqlite3
import tkinter as tk
from tkinter import messagebox, ttk, filedialog
import csv

DB = "company_gui.db"

# -----------------------------
# DB Setup
# -----------------------------
def init_db():
    conn = sqlite3.connect(DB)
    c = conn.cursor()
    c.execute("""
    CREATE TABLE IF NOT EXISTS employees (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT NOT NULL,
        role TEXT NOT NULL,
        salary REAL NOT NULL
    )
    """)
    conn.commit()
    conn.close()

def add_employee(name, role, salary):
    conn = sqlite3.connect(DB)
    c = conn.cursor()
    c.execute("INSERT INTO employees (name, role, salary) VALUES (?, ?, ?)", 
              (name, role, salary))
    conn.commit()
    conn.close()

def update_employee(emp_id, name, role, salary):
    conn = sqlite3.connect(DB)
    c = conn.cursor()
    c.execute("UPDATE employees SET name=?, role=?, salary=? WHERE id=?", 
              (name, role, salary, emp_id))
    conn.commit()
    conn.close()

def delete_employee(emp_id):
    conn = sqlite3.connect(DB)
    c = conn.cursor()
    c.execute("DELETE FROM employees WHERE id=?", (emp_id,))
    conn.commit()
    conn.close()

def get_employees(search=""):
    conn = sqlite3.connect(DB)
    c = conn.cursor()
    if search:
        c.execute("SELECT * FROM employees WHERE name LIKE ? OR role LIKE ?", 
                  (f"%{search}%", f"%{search}%"))
    else:
        c.execute("SELECT * FROM employees")
    rows = c.fetchall()
    conn.close()
    return rows

# -----------------------------
# GUI Functions
# -----------------------------
def add_employee_gui():
    name = entry_name.get().strip()
    role = entry_role.get().strip()
    salary = entry_salary.get().strip()

    if not name or not role or not salary:
        messagebox.showwarning("Input Error", "Please fill all fields")
        return
    try:
        salary = float(salary)
    except ValueError:
        messagebox.showwarning("Input Error", "Salary must be a number")
        return

    add_employee(name, role, salary)
    messagebox.showinfo("Success", "Employee added successfully")
    clear_inputs()
    load_employees()

def update_employee_gui():
    selected = tree.selection()
    if not selected:
        messagebox.showwarning("Selection Error", "Select an employee to update")
        return
    emp_id = tree.item(selected[0])["values"][0]
    
    name = entry_name.get().strip()
    role = entry_role.get().strip()
    salary = entry_salary.get().strip()

    if not name or not role or not salary:
        messagebox.showwarning("Input Error", "Please fill all fields")
        return
    try:
        salary = float(salary)
    except ValueError:
        messagebox.showwarning("Input Error", "Salary must be a number")
        return

    update_employee(emp_id, name, role, salary)
    messagebox.showinfo("Success", "Employee updated successfully")
    clear_inputs()
    load_employees()

def delete_employee_gui():
    selected = tree.selection()
    if not selected:
        messagebox.showwarning("Selection Error", "Select an employee to delete")
        return
    emp_id = tree.item(selected[0])["values"][0]
    confirm = messagebox.askyesno("Confirm Delete", "Are you sure you want to delete?")
    if confirm:
        delete_employee(emp_id)
        messagebox.showinfo("Success", "Employee deleted successfully")
        clear_inputs()
        load_employees()

def load_employees(search=""):
    for row in tree.get_children():
        tree.delete(row)
    employees = get_employees(search)
    for emp in employees:
        tree.insert("", tk.END, values=emp)

def clear_inputs():
    entry_name.delete(0, tk.END)
    entry_role.delete(0, tk.END)
    entry_salary.delete(0, tk.END)

def fill_inputs(event):
    selected = tree.selection()
    if not selected:
        return
    values = tree.item(selected[0])["values"]
    clear_inputs()
    entry_name.insert(0, values[1])
    entry_role.insert(0, values[2])
    entry_salary.insert(0, values[3])

def search_employee():
    query = entry_search.get().strip()
    load_employees(query)

def export_to_csv():
    employees = get_employees()
    if not employees:
        messagebox.showwarning("Export Error", "No data available to export")
        return

    file_path = filedialog.asksaveasfilename(
        defaultextension=".csv",
        filetypes=[("CSV files", "*.csv"), ("All Files", "*.*")]
    )
    if not file_path:
        return

    try:
        with open(file_path, mode="w", newline="") as file:
            writer = csv.writer(file)
            writer.writerow(["ID", "Name", "Role", "Salary"])
            writer.writerows(employees)
        messagebox.showinfo("Export Success", f"Data exported successfully to {file_path}")
    except Exception as e:
        messagebox.showerror("Export Error", f"Failed to export: {e}")

# -----------------------------
# GUI Layout
# -----------------------------
init_db()
root = tk.Tk()
root.title("Company Employee Management ")

# Input frame
frame = tk.Frame(root, padx=10, pady=10)
frame.pack(fill="x")

tk.Label(frame, text="Name:").grid(row=0, column=0, padx=5, pady=5)
entry_name = tk.Entry(frame)
entry_name.grid(row=0, column=1, padx=5, pady=5)

tk.Label(frame, text="Role:").grid(row=1, column=0, padx=5, pady=5)
entry_role = tk.Entry(frame)
entry_role.grid(row=1, column=1, padx=5, pady=5)

tk.Label(frame, text="Salary:").grid(row=2, column=0, padx=5, pady=5)
entry_salary = tk.Entry(frame)
entry_salary.grid(row=2, column=1, padx=5, pady=5)

btn_frame = tk.Frame(frame)
btn_frame.grid(row=3, column=0, columnspan=2, pady=10)

btn_add = tk.Button(btn_frame, text="Add", command=add_employee_gui, bg="lightgreen")
btn_add.grid(row=0, column=0, padx=5)

btn_update = tk.Button(btn_frame, text="Update", command=update_employee_gui, bg="lightblue")
btn_update.grid(row=0, column=1, padx=5)

btn_delete = tk.Button(btn_frame, text="Delete", command=delete_employee_gui, bg="tomato")
btn_delete.grid(row=0, column=2, padx=5)

btn_clear = tk.Button(btn_frame, text="Clear", command=clear_inputs, bg="lightyellow")
btn_clear.grid(row=0, column=3, padx=5)

btn_export = tk.Button(btn_frame, text="Export CSV", command=export_to_csv, bg="orange")
btn_export.grid(row=0, column=4, padx=5)

# Search frame
search_frame = tk.Frame(root, padx=10, pady=5)
search_frame.pack(fill="x")

tk.Label(search_frame, text="Search by Name/Role:").pack(side=tk.LEFT, padx=5)
entry_search = tk.Entry(search_frame)
entry_search.pack(side=tk.LEFT, padx=5)
btn_search = tk.Button(search_frame, text="Search", command=search_employee, bg="lightgrey")
btn_search.pack(side=tk.LEFT, padx=5)
btn_showall = tk.Button(search_frame, text="Show All", command=lambda: load_employees(""), bg="white")
btn_showall.pack(side=tk.LEFT, padx=5)

# Employee list
tree = ttk.Treeview(root, columns=("ID", "Name", "Role", "Salary"), show="headings")
tree.heading("ID", text="ID")
tree.heading("Name", text="Name")
tree.heading("Role", text="Role")
tree.heading("Salary", text="Salary")
tree.pack(fill="both", expand=True, padx=10, pady=10)

tree.bind("<<TreeviewSelect>>", fill_inputs)

load_employees()
root.mainloop()
